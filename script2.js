//Function to format the output generated by gemini
const formatBoldText = (text) => {

    const formattedBold = text.replace(/\*\*(.*?)\*\*/g, '<br><br>' + '<b>$1</b>');
    const formattedBullets = formattedBold.replace(/##/g, 'Recipe:' + '<br>');
    const formatbullet = formattedBullets.replace(/\*/g, '<br>' + 'â€¢')
    // const newline = formatbullet.replace(/(<b>.*?<\/b>)/g, '<br><br>$1');
    const serialnum = formatbullet.replace(/(\d+\.\s)/g, '');
    return serialnum;
};

//Function to validate if the input is related to a recipe, if not then it will return an unexpected output
const validresponse = (text) => {
    const validwords = ["recipe", "ingredients", "food", "cook", "cooking", "dish", "meal", "bake", "grill", "boil", "fry", "roast", "saute", "kitchen", "preparation", "serve", "serve hot", "serve cold", "seasoning", "flavor", "garnish", "taste", "mix", "blend", "chop", "slice", "dice", "mince", "stir", "combine", "batter", "dough", "marinate", "broth", "sauce", "pasta", "dessert", "snack", "appetizer", "main course", "beverage", "cuisine", "vegan", "vegetarian", "non-vegetarian", "protein", "carbs", "nutrition", "healthy", "quick meal", "easy recipe", "family dinner", "traditional", "fusion", "baking", "homemade", "delicious", "savory", "sweet", "spicy", "herbs", "spices", "flavors", "masala", "dal", "sambar", "roti", "paratha", "naan", "curry", "biryani", "pulav", "kachori", "idli", "dosa", "vada", "chutney", "pickle", "achar", "chaat", "pani puri", "golgappa", "pav bhaji", "tandoori", "kebab", "paneer", "rajma", "chole", "ladoo", "halwa", "gulab jamun", "jalebi", "kheer", "payasam", "rasgulla", "kulfi", "chaas", "lassi", "buttermilk", "spices", "garam masala", "turmeric", "coriander", "cumin", "mustard seeds", "fenugreek", "asafoetida", "curry leaves", "kokum", "tamarind", "besan", "atta", "maida", "ghee", "jaggery", "sabzi", "tadka", "bhojan", "thal", "rasam", "poha", "upma", "thepla", "dhokla"];

    return validwords.some((keyword) => text.includes(keyword));

}

//an event listener DOMcontentloades is used to ensure that the func runs after the html is completely loaded
document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("recipe-form");
    const recipeContainer = document.getElementById("recipe-container");

// Function named combine is used to combine the input for API
    function combine() {
        const ingValue = document.getElementById("ingredients").value;
        const timeValue = document.getElementById("time").value;

        if (!ingValue) {
            return null; 
        }

        else if (!validresponse(ingValue)) {
            return `It doesn't seem like a recipe. Please enter valid ingredients.`
        }

        else if (!timeValue) {
            return `Ingredients: ${ingValue}. Prepare it.`
        }
        else
            return `Ingredients: ${ingValue}. Preparation time: ${timeValue} minutes.`;
    }



 //Form submission and API calling.
    form.addEventListener("submit", async (e) => {
        e.preventDefault(); // Prevent page reload

        const combinedInput = combine();

        if (!combinedInput) {
            recipeContainer.innerHTML = "<p>Please fill in all fields.</p>";
            return;
        }

//"try" for error handling       
        try {
            recipeContainer.innerHTML = "<p>Generating your recipe...</p>"; // Show loading message
//API call
            const response = await fetch(
                "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyBTCnyhCrHKS-sDz52x9yAsEEr7hp30cos",
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        contents: [
                            {
                                parts: [
                                    {
                                        text: combinedInput,
                                    },
                                ],
                            },
                        ],
                    }),
                }
            );


            const result = await response.json();
//if response is not ok, error 
            if (!response.ok) {
                throw new Error(result.error.message || "Failed to generate the recipe.");
            }

//accessing the result from nested elements of the object (optional chaining)          
            const rawAnswer = result?.candidates[0]?.content?.parts[0]?.text || "No recipe generated."

//text formatting
           const formattedAnswer = formatBoldText(rawAnswer);
            // Display the API response in the UI
            recipeContainer.innerHTML = `
                <h3>Generated Recipe</h3><br><br>
                <p>${formattedAnswer}</p>
               `
        } catch (error) {
            console.error("Error:", error);
            recipeContainer.innerHTML = `<p>Error: ${error.message || "Failed to generate the recipe. Please try again later."}</p>`;
        }
    });
});
